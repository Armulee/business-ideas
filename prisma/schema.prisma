// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String
  email               String    @unique
  emailVerified       DateTime? @map("email_verified")
  image               String?
  profileId           String?   @map("profile_id") // Reference to MongoDB Profile._id
  password            String? // For credentials provider
  provider            String? // Authentication provider
  verificationToken   String?   @map("verification_token")
  verificationExpires DateTime? @map("verification_expires")
  callbackUrl         String?   @map("callback_url")
  resetToken          String?   @map("reset_token")
  resetTokenExpires   DateTime? @map("reset_token_expires")
  passwordHistory     Json[]    @default([]) @map("password_history")

  accounts       Account[]
  sessions       Session[]
  // optional for webauth support
  authenticators Authenticator[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Joinlist {
  id        String   @id @default(cuid())
  profile   String   // Reference to MongoDB Profile._id
  type      String   // "business" or "partner"
  marketing Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("joinlist")
}
